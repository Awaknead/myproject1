//常见关键字

//循环/判断：
// do        ---（循环）do while语句
// while     ---(循环)
// switch    ---（判断）语句多选项
// case      ---switch语句中的标签
// define    ---switch语句中默认标签
// for       ---（循环）for (1.不可再for循环体内修改循环变量 2.建议循环控制变量的取值采用“前闭后开区间”(i<10)) || (两边都是闭区间(i<=10)) || (0=假、非0=真)
// break     ---终止(退出)
// continue  ---继续

//类型：
// auto      ---自动变量（局部变量）
// const     ---常量类型
// signed    ---有符号类型
// unsigned  ---无符号类型
// goto      ---跳转语句
// if        ---(判断)if语句 
// else      ---否则（if else语句联合使用）
// char      ---字符类型
// int       ---整形类型
// short     ---短整型
// long      ---长整形类型
// float     ---单精度浮点数
// double    ---双精度浮点数

//系统：
// return    ---返回
// void      ---无（空）
// volatile  ---类型修饰符
// register  ---寄存器类型
// enum      ---枚举
// extern    ---引入外部符号
// sizeof    ---计算的变量所占内存空间的大小，单位是字节
// static    ---静态类型  (1.修饰局部变量-静态局部变量（影响生命周期） 2.修饰全局变量-静态全局变量(影响作用域) 3.修饰函数-静态函数(影响作用域))
// struct    ---结构体类型
// typedef   ---类型定义（类型重定义） （unsigned int(原类型名) => u_int(重定义类型名) ）等价
// union     ---联合体（共用体）


// 
// 库函数
// strcpy    ---字符串拷贝（strcpy-string copy）-头文件<string.h>
// strcmp    ---字符串比较 -头文件<string.h>
// sqrt      ---开平方函数 -头文件<math.h>
// 
// 
// 常见操作符
// |        ---按位或
// &        ---按位与（二进制）
// *        ---解引用/间接引用
// ->       ---结构体指针->成员
// .        ---结构体变量. 成员
// ^        ---按（二进制）位异或  相同为0  相异为1
// >>       ---右移操作符（移动二进制位）有除二效果 1.算术右移（右边丢弃，左边补符号位） 2.逻辑右移(右边丢弃，左边补0)
// <<       ---左移操作符（移动二进制位）
// /        ---除号，返回商
// %        ---取模（只能整数）返回余数
// !        ---逻辑反操作符
// ~        ---对一个数的二进制按位取反
// -        ---负值
// +        ---正值
// --       ---前置,后置--
// ++       ---前置,后置++
// (类型)    ---强制类型转换
// =        ---赋值
// 
// 关系操作符
// >        ---大于
// >=       ---大于等于
// <        ---小于
// <=       ---小于等于
// !=       ---不等于
// ==       ---等于
// 
// 
// 逻辑操作符
// &&       ---逻辑与       
// ||       ---逻辑或
// 
// 
// 条件操作符
// exp1?exp2:exp3
// 
// 下标引用
// []       ---小标引用操作符
// 
// 函数调用操作符
// ()       ---调用函数的时候的()就是函数调用操作符
// 
// 结构成员
// .        ---(指针变量)引用结构体成员
// ->       ---指针变量指向结构体成员
// 
// 逗号表达式
// ，        ---逗号隔开的表达式，从左至右依次执行。整个表达式的结果是最后一个表达式的结果。
// 
// 下标引用，函数调用和结构成员
// []